// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: streamdata.proto
// Protobuf C++ Version: 5.30.0-dev

#ifndef streamdata_2eproto_2epb_2eh
#define streamdata_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5030000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_streamdata_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_streamdata_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_streamdata_2eproto;
enum AirQuality : int;
bool AirQuality_IsValid(int value);
extern const uint32_t AirQuality_internal_data_[];
enum CoolingStage : int;
bool CoolingStage_IsValid(int value);
extern const uint32_t CoolingStage_internal_data_[];
enum FanStatus : int;
bool FanStatus_IsValid(int value);
extern const uint32_t FanStatus_internal_data_[];
enum HeatingStage : int;
bool HeatingStage_IsValid(int value);
extern const uint32_t HeatingStage_internal_data_[];
enum LedStatus : int;
bool LedStatus_IsValid(int value);
extern const uint32_t LedStatus_internal_data_[];
class LiveDataPoint;
struct LiveDataPointDefaultTypeInternal;
extern LiveDataPointDefaultTypeInternal _LiveDataPoint_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull LiveDataPoint_class_data_;
class LiveDataPointList;
struct LiveDataPointListDefaultTypeInternal;
extern LiveDataPointListDefaultTypeInternal _LiveDataPointList_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull LiveDataPointList_class_data_;
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::AirQuality_internal_data_>
    internal::EnumTraitsImpl::value<::AirQuality>;
template <>
internal::EnumTraitsT<::CoolingStage_internal_data_>
    internal::EnumTraitsImpl::value<::CoolingStage>;
template <>
internal::EnumTraitsT<::FanStatus_internal_data_>
    internal::EnumTraitsImpl::value<::FanStatus>;
template <>
internal::EnumTraitsT<::HeatingStage_internal_data_>
    internal::EnumTraitsImpl::value<::HeatingStage>;
template <>
internal::EnumTraitsT<::LedStatus_internal_data_>
    internal::EnumTraitsImpl::value<::LedStatus>;
}  // namespace protobuf
}  // namespace google

enum AirQuality : int {
  AIR_QUALITY_VALUE_NONE = 0,
  AIR_QUALITY_VALUE_0 = 1,
  AIR_QUALITY_VALUE_1 = 2,
  AIR_QUALITY_VALUE_2 = 3,
  AirQuality_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AirQuality_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AirQuality_IsValid(int value);
extern const uint32_t AirQuality_internal_data_[];
inline constexpr AirQuality AirQuality_MIN =
    static_cast<AirQuality>(0);
inline constexpr AirQuality AirQuality_MAX =
    static_cast<AirQuality>(3);
inline constexpr int AirQuality_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
AirQuality_descriptor();
template <typename T>
const std::string& AirQuality_Name(T value) {
  static_assert(std::is_same<T, AirQuality>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AirQuality_Name().");
  return AirQuality_Name(static_cast<AirQuality>(value));
}
template <>
inline const std::string& AirQuality_Name(AirQuality value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AirQuality_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool AirQuality_Parse(absl::string_view name, AirQuality* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AirQuality>(
      AirQuality_descriptor(), name, value);
}
enum CoolingStage : int {
  COOLING_STAGE_VALUE_0 = 0,
  COOLING_STAGE_VALUE_1 = 1,
  COOLING_STAGE_VALUE_2 = 2,
  CoolingStage_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CoolingStage_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CoolingStage_IsValid(int value);
extern const uint32_t CoolingStage_internal_data_[];
inline constexpr CoolingStage CoolingStage_MIN =
    static_cast<CoolingStage>(0);
inline constexpr CoolingStage CoolingStage_MAX =
    static_cast<CoolingStage>(2);
inline constexpr int CoolingStage_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
CoolingStage_descriptor();
template <typename T>
const std::string& CoolingStage_Name(T value) {
  static_assert(std::is_same<T, CoolingStage>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CoolingStage_Name().");
  return CoolingStage_Name(static_cast<CoolingStage>(value));
}
template <>
inline const std::string& CoolingStage_Name(CoolingStage value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CoolingStage_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool CoolingStage_Parse(absl::string_view name, CoolingStage* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CoolingStage>(
      CoolingStage_descriptor(), name, value);
}
enum HeatingStage : int {
  HEATING_STAGE_VALUE_0 = 0,
  HEATING_STAGE_VALUE_1 = 1,
  HEATING_STAGE_VALUE_2 = 2,
  HEATING_STAGE_VALUE_3 = 3,
  HeatingStage_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  HeatingStage_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool HeatingStage_IsValid(int value);
extern const uint32_t HeatingStage_internal_data_[];
inline constexpr HeatingStage HeatingStage_MIN =
    static_cast<HeatingStage>(0);
inline constexpr HeatingStage HeatingStage_MAX =
    static_cast<HeatingStage>(3);
inline constexpr int HeatingStage_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
HeatingStage_descriptor();
template <typename T>
const std::string& HeatingStage_Name(T value) {
  static_assert(std::is_same<T, HeatingStage>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to HeatingStage_Name().");
  return HeatingStage_Name(static_cast<HeatingStage>(value));
}
template <>
inline const std::string& HeatingStage_Name(HeatingStage value) {
  return ::google::protobuf::internal::NameOfDenseEnum<HeatingStage_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool HeatingStage_Parse(absl::string_view name, HeatingStage* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HeatingStage>(
      HeatingStage_descriptor(), name, value);
}
enum FanStatus : int {
  FAN_STATUS_VALUE_0 = 0,
  FAN_STATUS_VALUE_1 = 1,
  FanStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  FanStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool FanStatus_IsValid(int value);
extern const uint32_t FanStatus_internal_data_[];
inline constexpr FanStatus FanStatus_MIN =
    static_cast<FanStatus>(0);
inline constexpr FanStatus FanStatus_MAX =
    static_cast<FanStatus>(1);
inline constexpr int FanStatus_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
FanStatus_descriptor();
template <typename T>
const std::string& FanStatus_Name(T value) {
  static_assert(std::is_same<T, FanStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to FanStatus_Name().");
  return FanStatus_Name(static_cast<FanStatus>(value));
}
template <>
inline const std::string& FanStatus_Name(FanStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<FanStatus_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool FanStatus_Parse(absl::string_view name, FanStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FanStatus>(
      FanStatus_descriptor(), name, value);
}
enum LedStatus : int {
  LED_STATUS_VALUE_0 = 0,
  LED_STATUS_VALUE_1 = 1,
  LedStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  LedStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool LedStatus_IsValid(int value);
extern const uint32_t LedStatus_internal_data_[];
inline constexpr LedStatus LedStatus_MIN =
    static_cast<LedStatus>(0);
inline constexpr LedStatus LedStatus_MAX =
    static_cast<LedStatus>(1);
inline constexpr int LedStatus_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
LedStatus_descriptor();
template <typename T>
const std::string& LedStatus_Name(T value) {
  static_assert(std::is_same<T, LedStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to LedStatus_Name().");
  return LedStatus_Name(static_cast<LedStatus>(value));
}
template <>
inline const std::string& LedStatus_Name(LedStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<LedStatus_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool LedStatus_Parse(absl::string_view name, LedStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LedStatus>(
      LedStatus_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class LiveDataPoint final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:LiveDataPoint) */ {
 public:
  inline LiveDataPoint() : LiveDataPoint(nullptr) {}
  ~LiveDataPoint() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LiveDataPoint* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LiveDataPoint));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LiveDataPoint(
      ::google::protobuf::internal::ConstantInitialized);

  inline LiveDataPoint(const LiveDataPoint& from) : LiveDataPoint(nullptr, from) {}
  inline LiveDataPoint(LiveDataPoint&& from) noexcept
      : LiveDataPoint(nullptr, std::move(from)) {}
  inline LiveDataPoint& operator=(const LiveDataPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline LiveDataPoint& operator=(LiveDataPoint&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LiveDataPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const LiveDataPoint* internal_default_instance() {
    return reinterpret_cast<const LiveDataPoint*>(
        &_LiveDataPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(LiveDataPoint& a, LiveDataPoint& b) { a.Swap(&b); }
  inline void Swap(LiveDataPoint* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LiveDataPoint* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LiveDataPoint* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LiveDataPoint>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LiveDataPoint& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LiveDataPoint& from) { LiveDataPoint::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LiveDataPoint* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "LiveDataPoint"; }

 protected:
  explicit LiveDataPoint(::google::protobuf::Arena* arena);
  LiveDataPoint(::google::protobuf::Arena* arena, const LiveDataPoint& from);
  LiveDataPoint(::google::protobuf::Arena* arena, LiveDataPoint&& from) noexcept
      : LiveDataPoint(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSystemTypeFieldNumber = 13,
    kRunningModeFieldNumber = 14,
    kTimeFieldNumber = 1,
    kSetTemperatureFieldNumber = 2,
    kSetHumidityFieldNumber = 3,
    kCurrentTemperatureEmbeddedFieldNumber = 4,
    kCurrentHumidityEmbeddedFieldNumber = 5,
    kCurrentTemperatureMCUFieldNumber = 6,
    kAirPressureEmbeddedFieldNumber = 7,
    kCurrentAirQualityFieldNumber = 8,
    kCurrentCoolingStageFieldNumber = 9,
    kCurrentHeatingStageFieldNumber = 10,
    kCurrentFanStatusFieldNumber = 11,
    kLedStatusFieldNumber = 12,
    kOnlineStatusFieldNumber = 15,
    kIsSyncFieldNumber = 16,
  };
  // optional string system_type = 13;
  bool has_system_type() const;
  void clear_system_type() ;
  const std::string& system_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_system_type(Arg_&& arg, Args_... args);
  std::string* mutable_system_type();
  PROTOBUF_NODISCARD std::string* release_system_type();
  void set_allocated_system_type(std::string* value);

  private:
  const std::string& _internal_system_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_system_type(
      const std::string& value);
  std::string* _internal_mutable_system_type();

  public:
  // optional string running_mode = 14;
  bool has_running_mode() const;
  void clear_running_mode() ;
  const std::string& running_mode() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_running_mode(Arg_&& arg, Args_... args);
  std::string* mutable_running_mode();
  PROTOBUF_NODISCARD std::string* release_running_mode();
  void set_allocated_running_mode(std::string* value);

  private:
  const std::string& _internal_running_mode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_running_mode(
      const std::string& value);
  std::string* _internal_mutable_running_mode();

  public:
  // .google.protobuf.Timestamp time = 1;
  bool has_time() const;
  void clear_time() ;
  const ::google::protobuf::Timestamp& time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_time();
  ::google::protobuf::Timestamp* mutable_time();
  void set_allocated_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_time();

  private:
  const ::google::protobuf::Timestamp& _internal_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_time();

  public:
  // optional float set_temperature = 2;
  bool has_set_temperature() const;
  void clear_set_temperature() ;
  float set_temperature() const;
  void set_set_temperature(float value);

  private:
  float _internal_set_temperature() const;
  void _internal_set_set_temperature(float value);

  public:
  // optional float set_humidity = 3;
  bool has_set_humidity() const;
  void clear_set_humidity() ;
  float set_humidity() const;
  void set_set_humidity(float value);

  private:
  float _internal_set_humidity() const;
  void _internal_set_set_humidity(float value);

  public:
  // optional float current_temperature_embedded = 4;
  bool has_current_temperature_embedded() const;
  void clear_current_temperature_embedded() ;
  float current_temperature_embedded() const;
  void set_current_temperature_embedded(float value);

  private:
  float _internal_current_temperature_embedded() const;
  void _internal_set_current_temperature_embedded(float value);

  public:
  // optional float current_humidity_embedded = 5;
  bool has_current_humidity_embedded() const;
  void clear_current_humidity_embedded() ;
  float current_humidity_embedded() const;
  void set_current_humidity_embedded(float value);

  private:
  float _internal_current_humidity_embedded() const;
  void _internal_set_current_humidity_embedded(float value);

  public:
  // optional float current_temperature_MCU = 6;
  bool has_current_temperature_mcu() const;
  void clear_current_temperature_mcu() ;
  float current_temperature_mcu() const;
  void set_current_temperature_mcu(float value);

  private:
  float _internal_current_temperature_mcu() const;
  void _internal_set_current_temperature_mcu(float value);

  public:
  // optional float air_pressure_embedded = 7;
  bool has_air_pressure_embedded() const;
  void clear_air_pressure_embedded() ;
  float air_pressure_embedded() const;
  void set_air_pressure_embedded(float value);

  private:
  float _internal_air_pressure_embedded() const;
  void _internal_set_air_pressure_embedded(float value);

  public:
  // optional .AirQuality current_air_quality = 8;
  bool has_current_air_quality() const;
  void clear_current_air_quality() ;
  ::AirQuality current_air_quality() const;
  void set_current_air_quality(::AirQuality value);

  private:
  ::AirQuality _internal_current_air_quality() const;
  void _internal_set_current_air_quality(::AirQuality value);

  public:
  // optional .CoolingStage current_cooling_stage = 9;
  bool has_current_cooling_stage() const;
  void clear_current_cooling_stage() ;
  ::CoolingStage current_cooling_stage() const;
  void set_current_cooling_stage(::CoolingStage value);

  private:
  ::CoolingStage _internal_current_cooling_stage() const;
  void _internal_set_current_cooling_stage(::CoolingStage value);

  public:
  // optional .HeatingStage current_heating_stage = 10;
  bool has_current_heating_stage() const;
  void clear_current_heating_stage() ;
  ::HeatingStage current_heating_stage() const;
  void set_current_heating_stage(::HeatingStage value);

  private:
  ::HeatingStage _internal_current_heating_stage() const;
  void _internal_set_current_heating_stage(::HeatingStage value);

  public:
  // optional .FanStatus current_fan_status = 11;
  bool has_current_fan_status() const;
  void clear_current_fan_status() ;
  ::FanStatus current_fan_status() const;
  void set_current_fan_status(::FanStatus value);

  private:
  ::FanStatus _internal_current_fan_status() const;
  void _internal_set_current_fan_status(::FanStatus value);

  public:
  // optional .LedStatus led_status = 12;
  bool has_led_status() const;
  void clear_led_status() ;
  ::LedStatus led_status() const;
  void set_led_status(::LedStatus value);

  private:
  ::LedStatus _internal_led_status() const;
  void _internal_set_led_status(::LedStatus value);

  public:
  // optional bool online_status = 15;
  bool has_online_status() const;
  void clear_online_status() ;
  bool online_status() const;
  void set_online_status(bool value);

  private:
  bool _internal_online_status() const;
  void _internal_set_online_status(bool value);

  public:
  // bool is_sync = 16;
  void clear_is_sync() ;
  bool is_sync() const;
  void set_is_sync(bool value);

  private:
  bool _internal_is_sync() const;
  void _internal_set_is_sync(bool value);

  public:
  // @@protoc_insertion_point(class_scope:LiveDataPoint)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 16, 1,
      61, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LiveDataPoint& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr system_type_;
    ::google::protobuf::internal::ArenaStringPtr running_mode_;
    ::google::protobuf::Timestamp* time_;
    float set_temperature_;
    float set_humidity_;
    float current_temperature_embedded_;
    float current_humidity_embedded_;
    float current_temperature_mcu_;
    float air_pressure_embedded_;
    int current_air_quality_;
    int current_cooling_stage_;
    int current_heating_stage_;
    int current_fan_status_;
    int led_status_;
    bool online_status_;
    bool is_sync_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_streamdata_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull LiveDataPoint_class_data_;
// -------------------------------------------------------------------

class LiveDataPointList final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:LiveDataPointList) */ {
 public:
  inline LiveDataPointList() : LiveDataPointList(nullptr) {}
  ~LiveDataPointList() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LiveDataPointList* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LiveDataPointList));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LiveDataPointList(
      ::google::protobuf::internal::ConstantInitialized);

  inline LiveDataPointList(const LiveDataPointList& from) : LiveDataPointList(nullptr, from) {}
  inline LiveDataPointList(LiveDataPointList&& from) noexcept
      : LiveDataPointList(nullptr, std::move(from)) {}
  inline LiveDataPointList& operator=(const LiveDataPointList& from) {
    CopyFrom(from);
    return *this;
  }
  inline LiveDataPointList& operator=(LiveDataPointList&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LiveDataPointList& default_instance() {
    return *internal_default_instance();
  }
  static inline const LiveDataPointList* internal_default_instance() {
    return reinterpret_cast<const LiveDataPointList*>(
        &_LiveDataPointList_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(LiveDataPointList& a, LiveDataPointList& b) { a.Swap(&b); }
  inline void Swap(LiveDataPointList* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LiveDataPointList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LiveDataPointList* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LiveDataPointList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LiveDataPointList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LiveDataPointList& from) { LiveDataPointList::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LiveDataPointList* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "LiveDataPointList"; }

 protected:
  explicit LiveDataPointList(::google::protobuf::Arena* arena);
  LiveDataPointList(::google::protobuf::Arena* arena, const LiveDataPointList& from);
  LiveDataPointList(::google::protobuf::Arena* arena, LiveDataPointList&& from) noexcept
      : LiveDataPointList(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataPointsFieldNumber = 1,
  };
  // repeated .LiveDataPoint data_points = 1;
  int data_points_size() const;
  private:
  int _internal_data_points_size() const;

  public:
  void clear_data_points() ;
  ::LiveDataPoint* mutable_data_points(int index);
  ::google::protobuf::RepeatedPtrField<::LiveDataPoint>* mutable_data_points();

  private:
  const ::google::protobuf::RepeatedPtrField<::LiveDataPoint>& _internal_data_points() const;
  ::google::protobuf::RepeatedPtrField<::LiveDataPoint>* _internal_mutable_data_points();
  public:
  const ::LiveDataPoint& data_points(int index) const;
  ::LiveDataPoint* add_data_points();
  const ::google::protobuf::RepeatedPtrField<::LiveDataPoint>& data_points() const;
  // @@protoc_insertion_point(class_scope:LiveDataPointList)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LiveDataPointList& from_msg);
    ::google::protobuf::RepeatedPtrField< ::LiveDataPoint > data_points_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_streamdata_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull LiveDataPointList_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// LiveDataPoint

// .google.protobuf.Timestamp time = 1;
inline bool LiveDataPoint::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& LiveDataPoint::_internal_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& LiveDataPoint::time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:LiveDataPoint.time)
  return _internal_time();
}
inline void LiveDataPoint::unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LiveDataPoint.time)
}
inline ::google::protobuf::Timestamp* LiveDataPoint::release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* released = _impl_.time_;
  _impl_.time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* LiveDataPoint::unsafe_arena_release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:LiveDataPoint.time)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* LiveDataPoint::_internal_mutable_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.time_;
}
inline ::google::protobuf::Timestamp* LiveDataPoint::mutable_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:LiveDataPoint.time)
  return _msg;
}
inline void LiveDataPoint::set_allocated_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:LiveDataPoint.time)
}

// optional float set_temperature = 2;
inline bool LiveDataPoint::has_set_temperature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void LiveDataPoint::clear_set_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.set_temperature_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float LiveDataPoint::set_temperature() const {
  // @@protoc_insertion_point(field_get:LiveDataPoint.set_temperature)
  return _internal_set_temperature();
}
inline void LiveDataPoint::set_set_temperature(float value) {
  _internal_set_set_temperature(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:LiveDataPoint.set_temperature)
}
inline float LiveDataPoint::_internal_set_temperature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.set_temperature_;
}
inline void LiveDataPoint::_internal_set_set_temperature(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.set_temperature_ = value;
}

// optional float set_humidity = 3;
inline bool LiveDataPoint::has_set_humidity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void LiveDataPoint::clear_set_humidity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.set_humidity_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float LiveDataPoint::set_humidity() const {
  // @@protoc_insertion_point(field_get:LiveDataPoint.set_humidity)
  return _internal_set_humidity();
}
inline void LiveDataPoint::set_set_humidity(float value) {
  _internal_set_set_humidity(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:LiveDataPoint.set_humidity)
}
inline float LiveDataPoint::_internal_set_humidity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.set_humidity_;
}
inline void LiveDataPoint::_internal_set_set_humidity(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.set_humidity_ = value;
}

// optional float current_temperature_embedded = 4;
inline bool LiveDataPoint::has_current_temperature_embedded() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void LiveDataPoint::clear_current_temperature_embedded() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_temperature_embedded_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float LiveDataPoint::current_temperature_embedded() const {
  // @@protoc_insertion_point(field_get:LiveDataPoint.current_temperature_embedded)
  return _internal_current_temperature_embedded();
}
inline void LiveDataPoint::set_current_temperature_embedded(float value) {
  _internal_set_current_temperature_embedded(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:LiveDataPoint.current_temperature_embedded)
}
inline float LiveDataPoint::_internal_current_temperature_embedded() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.current_temperature_embedded_;
}
inline void LiveDataPoint::_internal_set_current_temperature_embedded(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_temperature_embedded_ = value;
}

// optional float current_humidity_embedded = 5;
inline bool LiveDataPoint::has_current_humidity_embedded() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void LiveDataPoint::clear_current_humidity_embedded() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_humidity_embedded_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float LiveDataPoint::current_humidity_embedded() const {
  // @@protoc_insertion_point(field_get:LiveDataPoint.current_humidity_embedded)
  return _internal_current_humidity_embedded();
}
inline void LiveDataPoint::set_current_humidity_embedded(float value) {
  _internal_set_current_humidity_embedded(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:LiveDataPoint.current_humidity_embedded)
}
inline float LiveDataPoint::_internal_current_humidity_embedded() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.current_humidity_embedded_;
}
inline void LiveDataPoint::_internal_set_current_humidity_embedded(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_humidity_embedded_ = value;
}

// optional float current_temperature_MCU = 6;
inline bool LiveDataPoint::has_current_temperature_mcu() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void LiveDataPoint::clear_current_temperature_mcu() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_temperature_mcu_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float LiveDataPoint::current_temperature_mcu() const {
  // @@protoc_insertion_point(field_get:LiveDataPoint.current_temperature_MCU)
  return _internal_current_temperature_mcu();
}
inline void LiveDataPoint::set_current_temperature_mcu(float value) {
  _internal_set_current_temperature_mcu(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:LiveDataPoint.current_temperature_MCU)
}
inline float LiveDataPoint::_internal_current_temperature_mcu() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.current_temperature_mcu_;
}
inline void LiveDataPoint::_internal_set_current_temperature_mcu(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_temperature_mcu_ = value;
}

// optional float air_pressure_embedded = 7;
inline bool LiveDataPoint::has_air_pressure_embedded() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void LiveDataPoint::clear_air_pressure_embedded() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.air_pressure_embedded_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float LiveDataPoint::air_pressure_embedded() const {
  // @@protoc_insertion_point(field_get:LiveDataPoint.air_pressure_embedded)
  return _internal_air_pressure_embedded();
}
inline void LiveDataPoint::set_air_pressure_embedded(float value) {
  _internal_set_air_pressure_embedded(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:LiveDataPoint.air_pressure_embedded)
}
inline float LiveDataPoint::_internal_air_pressure_embedded() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.air_pressure_embedded_;
}
inline void LiveDataPoint::_internal_set_air_pressure_embedded(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.air_pressure_embedded_ = value;
}

// optional .AirQuality current_air_quality = 8;
inline bool LiveDataPoint::has_current_air_quality() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void LiveDataPoint::clear_current_air_quality() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_air_quality_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::AirQuality LiveDataPoint::current_air_quality() const {
  // @@protoc_insertion_point(field_get:LiveDataPoint.current_air_quality)
  return _internal_current_air_quality();
}
inline void LiveDataPoint::set_current_air_quality(::AirQuality value) {
  _internal_set_current_air_quality(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:LiveDataPoint.current_air_quality)
}
inline ::AirQuality LiveDataPoint::_internal_current_air_quality() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::AirQuality>(_impl_.current_air_quality_);
}
inline void LiveDataPoint::_internal_set_current_air_quality(::AirQuality value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_air_quality_ = value;
}

// optional .CoolingStage current_cooling_stage = 9;
inline bool LiveDataPoint::has_current_cooling_stage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void LiveDataPoint::clear_current_cooling_stage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_cooling_stage_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::CoolingStage LiveDataPoint::current_cooling_stage() const {
  // @@protoc_insertion_point(field_get:LiveDataPoint.current_cooling_stage)
  return _internal_current_cooling_stage();
}
inline void LiveDataPoint::set_current_cooling_stage(::CoolingStage value) {
  _internal_set_current_cooling_stage(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:LiveDataPoint.current_cooling_stage)
}
inline ::CoolingStage LiveDataPoint::_internal_current_cooling_stage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::CoolingStage>(_impl_.current_cooling_stage_);
}
inline void LiveDataPoint::_internal_set_current_cooling_stage(::CoolingStage value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_cooling_stage_ = value;
}

// optional .HeatingStage current_heating_stage = 10;
inline bool LiveDataPoint::has_current_heating_stage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void LiveDataPoint::clear_current_heating_stage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_heating_stage_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::HeatingStage LiveDataPoint::current_heating_stage() const {
  // @@protoc_insertion_point(field_get:LiveDataPoint.current_heating_stage)
  return _internal_current_heating_stage();
}
inline void LiveDataPoint::set_current_heating_stage(::HeatingStage value) {
  _internal_set_current_heating_stage(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:LiveDataPoint.current_heating_stage)
}
inline ::HeatingStage LiveDataPoint::_internal_current_heating_stage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::HeatingStage>(_impl_.current_heating_stage_);
}
inline void LiveDataPoint::_internal_set_current_heating_stage(::HeatingStage value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_heating_stage_ = value;
}

// optional .FanStatus current_fan_status = 11;
inline bool LiveDataPoint::has_current_fan_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void LiveDataPoint::clear_current_fan_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_fan_status_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::FanStatus LiveDataPoint::current_fan_status() const {
  // @@protoc_insertion_point(field_get:LiveDataPoint.current_fan_status)
  return _internal_current_fan_status();
}
inline void LiveDataPoint::set_current_fan_status(::FanStatus value) {
  _internal_set_current_fan_status(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:LiveDataPoint.current_fan_status)
}
inline ::FanStatus LiveDataPoint::_internal_current_fan_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::FanStatus>(_impl_.current_fan_status_);
}
inline void LiveDataPoint::_internal_set_current_fan_status(::FanStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_fan_status_ = value;
}

// optional .LedStatus led_status = 12;
inline bool LiveDataPoint::has_led_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void LiveDataPoint::clear_led_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.led_status_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::LedStatus LiveDataPoint::led_status() const {
  // @@protoc_insertion_point(field_get:LiveDataPoint.led_status)
  return _internal_led_status();
}
inline void LiveDataPoint::set_led_status(::LedStatus value) {
  _internal_set_led_status(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:LiveDataPoint.led_status)
}
inline ::LedStatus LiveDataPoint::_internal_led_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::LedStatus>(_impl_.led_status_);
}
inline void LiveDataPoint::_internal_set_led_status(::LedStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.led_status_ = value;
}

// optional string system_type = 13;
inline bool LiveDataPoint::has_system_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void LiveDataPoint::clear_system_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.system_type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LiveDataPoint::system_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:LiveDataPoint.system_type)
  return _internal_system_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LiveDataPoint::set_system_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.system_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:LiveDataPoint.system_type)
}
inline std::string* LiveDataPoint::mutable_system_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_system_type();
  // @@protoc_insertion_point(field_mutable:LiveDataPoint.system_type)
  return _s;
}
inline const std::string& LiveDataPoint::_internal_system_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.system_type_.Get();
}
inline void LiveDataPoint::_internal_set_system_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.system_type_.Set(value, GetArena());
}
inline std::string* LiveDataPoint::_internal_mutable_system_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.system_type_.Mutable( GetArena());
}
inline std::string* LiveDataPoint::release_system_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:LiveDataPoint.system_type)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.system_type_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.system_type_.Set("", GetArena());
  }
  return released;
}
inline void LiveDataPoint::set_allocated_system_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.system_type_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.system_type_.IsDefault()) {
    _impl_.system_type_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:LiveDataPoint.system_type)
}

// optional string running_mode = 14;
inline bool LiveDataPoint::has_running_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void LiveDataPoint::clear_running_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.running_mode_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LiveDataPoint::running_mode() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:LiveDataPoint.running_mode)
  return _internal_running_mode();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LiveDataPoint::set_running_mode(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.running_mode_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:LiveDataPoint.running_mode)
}
inline std::string* LiveDataPoint::mutable_running_mode() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_running_mode();
  // @@protoc_insertion_point(field_mutable:LiveDataPoint.running_mode)
  return _s;
}
inline const std::string& LiveDataPoint::_internal_running_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.running_mode_.Get();
}
inline void LiveDataPoint::_internal_set_running_mode(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.running_mode_.Set(value, GetArena());
}
inline std::string* LiveDataPoint::_internal_mutable_running_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.running_mode_.Mutable( GetArena());
}
inline std::string* LiveDataPoint::release_running_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:LiveDataPoint.running_mode)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.running_mode_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.running_mode_.Set("", GetArena());
  }
  return released;
}
inline void LiveDataPoint::set_allocated_running_mode(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.running_mode_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.running_mode_.IsDefault()) {
    _impl_.running_mode_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:LiveDataPoint.running_mode)
}

// optional bool online_status = 15;
inline bool LiveDataPoint::has_online_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void LiveDataPoint::clear_online_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.online_status_ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool LiveDataPoint::online_status() const {
  // @@protoc_insertion_point(field_get:LiveDataPoint.online_status)
  return _internal_online_status();
}
inline void LiveDataPoint::set_online_status(bool value) {
  _internal_set_online_status(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:LiveDataPoint.online_status)
}
inline bool LiveDataPoint::_internal_online_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.online_status_;
}
inline void LiveDataPoint::_internal_set_online_status(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.online_status_ = value;
}

// bool is_sync = 16;
inline void LiveDataPoint::clear_is_sync() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_sync_ = false;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline bool LiveDataPoint::is_sync() const {
  // @@protoc_insertion_point(field_get:LiveDataPoint.is_sync)
  return _internal_is_sync();
}
inline void LiveDataPoint::set_is_sync(bool value) {
  _internal_set_is_sync(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:LiveDataPoint.is_sync)
}
inline bool LiveDataPoint::_internal_is_sync() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_sync_;
}
inline void LiveDataPoint::_internal_set_is_sync(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_sync_ = value;
}

// -------------------------------------------------------------------

// LiveDataPointList

// repeated .LiveDataPoint data_points = 1;
inline int LiveDataPointList::_internal_data_points_size() const {
  return _internal_data_points().size();
}
inline int LiveDataPointList::data_points_size() const {
  return _internal_data_points_size();
}
inline void LiveDataPointList::clear_data_points() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_points_.Clear();
}
inline ::LiveDataPoint* LiveDataPointList::mutable_data_points(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:LiveDataPointList.data_points)
  return _internal_mutable_data_points()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::LiveDataPoint>* LiveDataPointList::mutable_data_points()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:LiveDataPointList.data_points)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_data_points();
}
inline const ::LiveDataPoint& LiveDataPointList::data_points(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:LiveDataPointList.data_points)
  return _internal_data_points().Get(index);
}
inline ::LiveDataPoint* LiveDataPointList::add_data_points() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::LiveDataPoint* _add = _internal_mutable_data_points()->Add();
  // @@protoc_insertion_point(field_add:LiveDataPointList.data_points)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::LiveDataPoint>& LiveDataPointList::data_points() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:LiveDataPointList.data_points)
  return _internal_data_points();
}
inline const ::google::protobuf::RepeatedPtrField<::LiveDataPoint>&
LiveDataPointList::_internal_data_points() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_points_;
}
inline ::google::protobuf::RepeatedPtrField<::LiveDataPoint>*
LiveDataPointList::_internal_mutable_data_points() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.data_points_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::AirQuality> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::AirQuality>() {
  return ::AirQuality_descriptor();
}
template <>
struct is_proto_enum<::CoolingStage> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::CoolingStage>() {
  return ::CoolingStage_descriptor();
}
template <>
struct is_proto_enum<::HeatingStage> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::HeatingStage>() {
  return ::HeatingStage_descriptor();
}
template <>
struct is_proto_enum<::FanStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::FanStatus>() {
  return ::FanStatus_descriptor();
}
template <>
struct is_proto_enum<::LedStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::LedStatus>() {
  return ::LedStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // streamdata_2eproto_2epb_2eh
