// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: streamdata.proto
// Protobuf C++ Version: 5.30.0-dev

#include "streamdata.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr LiveDataPoint::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        time_{nullptr},
        set_temperature_{0},
        set_humidity_{0},
        current_temperature_embedded_{0},
        current_humidity_embedded_{0},
        current_temperature_mcu_{0},
        air_pressure_embedded_{0},
        current_air_quality_{static_cast< ::AirQuality >(0)},
        current_cooling_stage_{static_cast< ::CoolingStage >(0)},
        current_heating_stage_{static_cast< ::HeatingStage >(0)},
        current_fan_status_{static_cast< ::FanStatus >(0)},
        led_status_{static_cast< ::LedStatus >(0)},
        is_sync_{false} {}

template <typename>
PROTOBUF_CONSTEXPR LiveDataPoint::LiveDataPoint(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(LiveDataPoint_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LiveDataPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LiveDataPointDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LiveDataPointDefaultTypeInternal() {}
  union {
    LiveDataPoint _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LiveDataPointDefaultTypeInternal _LiveDataPoint_default_instance_;

inline constexpr LiveDataPointList::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : data_points_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LiveDataPointList::LiveDataPointList(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(LiveDataPointList_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LiveDataPointListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LiveDataPointListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LiveDataPointListDefaultTypeInternal() {}
  union {
    LiveDataPointList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LiveDataPointListDefaultTypeInternal _LiveDataPointList_default_instance_;
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_streamdata_2eproto[5];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_streamdata_2eproto = nullptr;
const ::uint32_t
    TableStruct_streamdata_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::LiveDataPoint, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::LiveDataPoint, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::LiveDataPoint, _impl_.time_),
        PROTOBUF_FIELD_OFFSET(::LiveDataPoint, _impl_.set_temperature_),
        PROTOBUF_FIELD_OFFSET(::LiveDataPoint, _impl_.set_humidity_),
        PROTOBUF_FIELD_OFFSET(::LiveDataPoint, _impl_.current_temperature_embedded_),
        PROTOBUF_FIELD_OFFSET(::LiveDataPoint, _impl_.current_humidity_embedded_),
        PROTOBUF_FIELD_OFFSET(::LiveDataPoint, _impl_.current_temperature_mcu_),
        PROTOBUF_FIELD_OFFSET(::LiveDataPoint, _impl_.air_pressure_embedded_),
        PROTOBUF_FIELD_OFFSET(::LiveDataPoint, _impl_.current_air_quality_),
        PROTOBUF_FIELD_OFFSET(::LiveDataPoint, _impl_.current_cooling_stage_),
        PROTOBUF_FIELD_OFFSET(::LiveDataPoint, _impl_.current_heating_stage_),
        PROTOBUF_FIELD_OFFSET(::LiveDataPoint, _impl_.current_fan_status_),
        PROTOBUF_FIELD_OFFSET(::LiveDataPoint, _impl_.led_status_),
        PROTOBUF_FIELD_OFFSET(::LiveDataPoint, _impl_.is_sync_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::LiveDataPointList, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::LiveDataPointList, _impl_.data_points_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 21, -1, sizeof(::LiveDataPoint)},
        {34, -1, -1, sizeof(::LiveDataPointList)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::_LiveDataPoint_default_instance_._instance,
    &::_LiveDataPointList_default_instance_._instance,
};
const char descriptor_table_protodef_streamdata_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\020streamdata.proto\032\037google/protobuf/time"
    "stamp.proto\"\223\006\n\rLiveDataPoint\022(\n\004time\030\001 "
    "\001(\0132\032.google.protobuf.Timestamp\022\034\n\017set_t"
    "emperature\030\002 \001(\002H\000\210\001\001\022\031\n\014set_humidity\030\003 "
    "\001(\002H\001\210\001\001\022)\n\034current_temperature_embedded"
    "\030\004 \001(\002H\002\210\001\001\022&\n\031current_humidity_embedded"
    "\030\005 \001(\002H\003\210\001\001\022$\n\027current_temperature_MCU\030\006"
    " \001(\002H\004\210\001\001\022\"\n\025air_pressure_embedded\030\007 \001(\002"
    "H\005\210\001\001\022-\n\023current_air_quality\030\010 \001(\0162\013.Air"
    "QualityH\006\210\001\001\0221\n\025current_cooling_stage\030\t "
    "\001(\0162\r.CoolingStageH\007\210\001\001\0221\n\025current_heati"
    "ng_stage\030\n \001(\0162\r.HeatingStageH\010\210\001\001\022+\n\022cu"
    "rrent_fan_status\030\013 \001(\0162\n.FanStatusH\t\210\001\001\022"
    "#\n\nled_status\030\014 \001(\0162\n.LedStatusH\n\210\001\001\022\017\n\007"
    "is_sync\030\r \001(\010B\022\n\020_set_temperatureB\017\n\r_se"
    "t_humidityB\037\n\035_current_temperature_embed"
    "dedB\034\n\032_current_humidity_embeddedB\032\n\030_cu"
    "rrent_temperature_MCUB\030\n\026_air_pressure_e"
    "mbeddedB\026\n\024_current_air_qualityB\030\n\026_curr"
    "ent_cooling_stageB\030\n\026_current_heating_st"
    "ageB\025\n\023_current_fan_statusB\r\n\013_led_statu"
    "s\"8\n\021LiveDataPointList\022#\n\013data_points\030\001 "
    "\003(\0132\016.LiveDataPoint*s\n\nAirQuality\022\032\n\026AIR"
    "_QUALITY_VALUE_NONE\020\000\022\027\n\023AIR_QUALITY_VAL"
    "UE_0\020\001\022\027\n\023AIR_QUALITY_VALUE_1\020\002\022\027\n\023AIR_Q"
    "UALITY_VALUE_2\020\003*_\n\014CoolingStage\022\031\n\025COOL"
    "ING_STAGE_VALUE_0\020\000\022\031\n\025COOLING_STAGE_VAL"
    "UE_1\020\001\022\031\n\025COOLING_STAGE_VALUE_2\020\002*z\n\014Hea"
    "tingStage\022\031\n\025HEATING_STAGE_VALUE_0\020\000\022\031\n\025"
    "HEATING_STAGE_VALUE_1\020\001\022\031\n\025HEATING_STAGE"
    "_VALUE_2\020\002\022\031\n\025HEATING_STAGE_VALUE_3\020\003*;\n"
    "\tFanStatus\022\026\n\022FAN_STATUS_VALUE_0\020\000\022\026\n\022FA"
    "N_STATUS_VALUE_1\020\001*;\n\tLedStatus\022\026\n\022LED_S"
    "TATUS_VALUE_0\020\000\022\026\n\022LED_STATUS_VALUE_1\020\001B"
    "7\n!com.nuvehvac.device.rest.protobufB\022Li"
    "veDataPointProtob\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_streamdata_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_streamdata_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_streamdata_2eproto = {
    false,
    false,
    1424,
    descriptor_table_protodef_streamdata_2eproto,
    "streamdata.proto",
    &descriptor_table_streamdata_2eproto_once,
    descriptor_table_streamdata_2eproto_deps,
    1,
    2,
    schemas,
    file_default_instances,
    TableStruct_streamdata_2eproto::offsets,
    file_level_enum_descriptors_streamdata_2eproto,
    file_level_service_descriptors_streamdata_2eproto,
};
const ::google::protobuf::EnumDescriptor* AirQuality_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_streamdata_2eproto);
  return file_level_enum_descriptors_streamdata_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t AirQuality_internal_data_[] = {
    262144u, 0u, };
bool AirQuality_IsValid(int value) {
  return 0 <= value && value <= 3;
}
const ::google::protobuf::EnumDescriptor* CoolingStage_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_streamdata_2eproto);
  return file_level_enum_descriptors_streamdata_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t CoolingStage_internal_data_[] = {
    196608u, 0u, };
bool CoolingStage_IsValid(int value) {
  return 0 <= value && value <= 2;
}
const ::google::protobuf::EnumDescriptor* HeatingStage_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_streamdata_2eproto);
  return file_level_enum_descriptors_streamdata_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t HeatingStage_internal_data_[] = {
    262144u, 0u, };
bool HeatingStage_IsValid(int value) {
  return 0 <= value && value <= 3;
}
const ::google::protobuf::EnumDescriptor* FanStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_streamdata_2eproto);
  return file_level_enum_descriptors_streamdata_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t FanStatus_internal_data_[] = {
    131072u, 0u, };
bool FanStatus_IsValid(int value) {
  return 0 <= value && value <= 1;
}
const ::google::protobuf::EnumDescriptor* LedStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_streamdata_2eproto);
  return file_level_enum_descriptors_streamdata_2eproto[4];
}
PROTOBUF_CONSTINIT const uint32_t LedStatus_internal_data_[] = {
    131072u, 0u, };
bool LedStatus_IsValid(int value) {
  return 0 <= value && value <= 1;
}
// ===================================================================

class LiveDataPoint::_Internal {
 public:
  using HasBits =
      decltype(std::declval<LiveDataPoint>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(LiveDataPoint, _impl_._has_bits_);
};

void LiveDataPoint::clear_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
LiveDataPoint::LiveDataPoint(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, LiveDataPoint_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:LiveDataPoint)
}
inline PROTOBUF_NDEBUG_INLINE LiveDataPoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::LiveDataPoint& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

LiveDataPoint::LiveDataPoint(
    ::google::protobuf::Arena* arena,
    const LiveDataPoint& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, LiveDataPoint_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  LiveDataPoint* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.time_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.time_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, set_temperature_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, set_temperature_),
           offsetof(Impl_, is_sync_) -
               offsetof(Impl_, set_temperature_) +
               sizeof(Impl_::is_sync_));

  // @@protoc_insertion_point(copy_constructor:LiveDataPoint)
}
inline PROTOBUF_NDEBUG_INLINE LiveDataPoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void LiveDataPoint::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, time_),
           0,
           offsetof(Impl_, is_sync_) -
               offsetof(Impl_, time_) +
               sizeof(Impl_::is_sync_));
}
LiveDataPoint::~LiveDataPoint() {
  // @@protoc_insertion_point(destructor:LiveDataPoint)
  SharedDtor(*this);
}
inline void LiveDataPoint::SharedDtor(MessageLite& self) {
  LiveDataPoint& this_ = static_cast<LiveDataPoint&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.time_;
  this_._impl_.~Impl_();
}

inline void* LiveDataPoint::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) LiveDataPoint(arena);
}
constexpr auto LiveDataPoint::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(LiveDataPoint),
                                            alignof(LiveDataPoint));
}
constexpr auto LiveDataPoint::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_LiveDataPoint_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &LiveDataPoint::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<LiveDataPoint>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &LiveDataPoint::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<LiveDataPoint>(), &LiveDataPoint::ByteSizeLong,
              &LiveDataPoint::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(LiveDataPoint, _impl_._cached_size_),
          false,
      },
      &LiveDataPoint::kDescriptorMethods,
      &descriptor_table_streamdata_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        LiveDataPoint_class_data_ =
            LiveDataPoint::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* LiveDataPoint::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&LiveDataPoint_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(LiveDataPoint_class_data_.tc_table);
  return LiveDataPoint_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 13, 1, 0, 2> LiveDataPoint::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LiveDataPoint, _impl_._has_bits_),
    0, // no _extensions_
    13, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294959104,  // skipmap
    offsetof(decltype(_table_), field_entries),
    13,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    LiveDataPoint_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::LiveDataPoint>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Timestamp time = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(LiveDataPoint, _impl_.time_)}},
    // optional float set_temperature = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(LiveDataPoint, _impl_.set_temperature_)}},
    // optional float set_humidity = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(LiveDataPoint, _impl_.set_humidity_)}},
    // optional float current_temperature_embedded = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 3, 0, PROTOBUF_FIELD_OFFSET(LiveDataPoint, _impl_.current_temperature_embedded_)}},
    // optional float current_humidity_embedded = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 4, 0, PROTOBUF_FIELD_OFFSET(LiveDataPoint, _impl_.current_humidity_embedded_)}},
    // optional float current_temperature_MCU = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 5, 0, PROTOBUF_FIELD_OFFSET(LiveDataPoint, _impl_.current_temperature_mcu_)}},
    // optional float air_pressure_embedded = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 6, 0, PROTOBUF_FIELD_OFFSET(LiveDataPoint, _impl_.air_pressure_embedded_)}},
    // optional .AirQuality current_air_quality = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LiveDataPoint, _impl_.current_air_quality_), 7>(),
     {64, 7, 0, PROTOBUF_FIELD_OFFSET(LiveDataPoint, _impl_.current_air_quality_)}},
    // optional .CoolingStage current_cooling_stage = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LiveDataPoint, _impl_.current_cooling_stage_), 8>(),
     {72, 8, 0, PROTOBUF_FIELD_OFFSET(LiveDataPoint, _impl_.current_cooling_stage_)}},
    // optional .HeatingStage current_heating_stage = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LiveDataPoint, _impl_.current_heating_stage_), 9>(),
     {80, 9, 0, PROTOBUF_FIELD_OFFSET(LiveDataPoint, _impl_.current_heating_stage_)}},
    // optional .FanStatus current_fan_status = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LiveDataPoint, _impl_.current_fan_status_), 10>(),
     {88, 10, 0, PROTOBUF_FIELD_OFFSET(LiveDataPoint, _impl_.current_fan_status_)}},
    // optional .LedStatus led_status = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LiveDataPoint, _impl_.led_status_), 11>(),
     {96, 11, 0, PROTOBUF_FIELD_OFFSET(LiveDataPoint, _impl_.led_status_)}},
    // bool is_sync = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(LiveDataPoint, _impl_.is_sync_), 12>(),
     {104, 12, 0, PROTOBUF_FIELD_OFFSET(LiveDataPoint, _impl_.is_sync_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Timestamp time = 1;
    {PROTOBUF_FIELD_OFFSET(LiveDataPoint, _impl_.time_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional float set_temperature = 2;
    {PROTOBUF_FIELD_OFFSET(LiveDataPoint, _impl_.set_temperature_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float set_humidity = 3;
    {PROTOBUF_FIELD_OFFSET(LiveDataPoint, _impl_.set_humidity_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float current_temperature_embedded = 4;
    {PROTOBUF_FIELD_OFFSET(LiveDataPoint, _impl_.current_temperature_embedded_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float current_humidity_embedded = 5;
    {PROTOBUF_FIELD_OFFSET(LiveDataPoint, _impl_.current_humidity_embedded_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float current_temperature_MCU = 6;
    {PROTOBUF_FIELD_OFFSET(LiveDataPoint, _impl_.current_temperature_mcu_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float air_pressure_embedded = 7;
    {PROTOBUF_FIELD_OFFSET(LiveDataPoint, _impl_.air_pressure_embedded_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional .AirQuality current_air_quality = 8;
    {PROTOBUF_FIELD_OFFSET(LiveDataPoint, _impl_.current_air_quality_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional .CoolingStage current_cooling_stage = 9;
    {PROTOBUF_FIELD_OFFSET(LiveDataPoint, _impl_.current_cooling_stage_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional .HeatingStage current_heating_stage = 10;
    {PROTOBUF_FIELD_OFFSET(LiveDataPoint, _impl_.current_heating_stage_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional .FanStatus current_fan_status = 11;
    {PROTOBUF_FIELD_OFFSET(LiveDataPoint, _impl_.current_fan_status_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional .LedStatus led_status = 12;
    {PROTOBUF_FIELD_OFFSET(LiveDataPoint, _impl_.led_status_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // bool is_sync = 13;
    {PROTOBUF_FIELD_OFFSET(LiveDataPoint, _impl_.is_sync_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void LiveDataPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:LiveDataPoint)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.time_ != nullptr);
    _impl_.time_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.set_temperature_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.current_air_quality_) -
        reinterpret_cast<char*>(&_impl_.set_temperature_)) + sizeof(_impl_.current_air_quality_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&_impl_.current_cooling_stage_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.is_sync_) -
        reinterpret_cast<char*>(&_impl_.current_cooling_stage_)) + sizeof(_impl_.is_sync_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* LiveDataPoint::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const LiveDataPoint& this_ = static_cast<const LiveDataPoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* LiveDataPoint::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const LiveDataPoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:LiveDataPoint)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp time = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.time_, this_._impl_.time_->GetCachedSize(), target,
                stream);
          }

          // optional float set_temperature = 2;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_set_temperature(), target);
          }

          // optional float set_humidity = 3;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_set_humidity(), target);
          }

          // optional float current_temperature_embedded = 4;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_current_temperature_embedded(), target);
          }

          // optional float current_humidity_embedded = 5;
          if (cached_has_bits & 0x00000010u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_current_humidity_embedded(), target);
          }

          // optional float current_temperature_MCU = 6;
          if (cached_has_bits & 0x00000020u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                6, this_._internal_current_temperature_mcu(), target);
          }

          // optional float air_pressure_embedded = 7;
          if (cached_has_bits & 0x00000040u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                7, this_._internal_air_pressure_embedded(), target);
          }

          // optional .AirQuality current_air_quality = 8;
          if (cached_has_bits & 0x00000080u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                8, this_._internal_current_air_quality(), target);
          }

          // optional .CoolingStage current_cooling_stage = 9;
          if (cached_has_bits & 0x00000100u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                9, this_._internal_current_cooling_stage(), target);
          }

          // optional .HeatingStage current_heating_stage = 10;
          if (cached_has_bits & 0x00000200u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                10, this_._internal_current_heating_stage(), target);
          }

          // optional .FanStatus current_fan_status = 11;
          if (cached_has_bits & 0x00000400u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                11, this_._internal_current_fan_status(), target);
          }

          // optional .LedStatus led_status = 12;
          if (cached_has_bits & 0x00000800u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                12, this_._internal_led_status(), target);
          }

          // bool is_sync = 13;
          if (cached_has_bits & 0x00001000u) {
            if (this_._internal_is_sync() != 0) {
              target = stream->EnsureSpace(target);
              target = ::_pbi::WireFormatLite::WriteBoolToArray(
                  13, this_._internal_is_sync(), target);
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:LiveDataPoint)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t LiveDataPoint::ByteSizeLong(const MessageLite& base) {
          const LiveDataPoint& this_ = static_cast<const LiveDataPoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t LiveDataPoint::ByteSizeLong() const {
          const LiveDataPoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:LiveDataPoint)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x000000ffu) {
            // .google.protobuf.Timestamp time = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.time_);
            }
            // optional float set_temperature = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 5;
            }
            // optional float set_humidity = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 5;
            }
            // optional float current_temperature_embedded = 4;
            if (cached_has_bits & 0x00000008u) {
              total_size += 5;
            }
            // optional float current_humidity_embedded = 5;
            if (cached_has_bits & 0x00000010u) {
              total_size += 5;
            }
            // optional float current_temperature_MCU = 6;
            if (cached_has_bits & 0x00000020u) {
              total_size += 5;
            }
            // optional float air_pressure_embedded = 7;
            if (cached_has_bits & 0x00000040u) {
              total_size += 5;
            }
            // optional .AirQuality current_air_quality = 8;
            if (cached_has_bits & 0x00000080u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_current_air_quality());
            }
          }
          if (cached_has_bits & 0x00001f00u) {
            // optional .CoolingStage current_cooling_stage = 9;
            if (cached_has_bits & 0x00000100u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_current_cooling_stage());
            }
            // optional .HeatingStage current_heating_stage = 10;
            if (cached_has_bits & 0x00000200u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_current_heating_stage());
            }
            // optional .FanStatus current_fan_status = 11;
            if (cached_has_bits & 0x00000400u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_current_fan_status());
            }
            // optional .LedStatus led_status = 12;
            if (cached_has_bits & 0x00000800u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_led_status());
            }
            // bool is_sync = 13;
            if (cached_has_bits & 0x00001000u) {
              if (this_._internal_is_sync() != 0) {
                total_size += 2;
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void LiveDataPoint::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LiveDataPoint*>(&to_msg);
  auto& from = static_cast<const LiveDataPoint&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:LiveDataPoint)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.time_ != nullptr);
      if (_this->_impl_.time_ == nullptr) {
        _this->_impl_.time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.time_);
      } else {
        _this->_impl_.time_->MergeFrom(*from._impl_.time_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.set_temperature_ = from._impl_.set_temperature_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.set_humidity_ = from._impl_.set_humidity_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.current_temperature_embedded_ = from._impl_.current_temperature_embedded_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.current_humidity_embedded_ = from._impl_.current_humidity_embedded_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.current_temperature_mcu_ = from._impl_.current_temperature_mcu_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.air_pressure_embedded_ = from._impl_.air_pressure_embedded_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.current_air_quality_ = from._impl_.current_air_quality_;
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.current_cooling_stage_ = from._impl_.current_cooling_stage_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.current_heating_stage_ = from._impl_.current_heating_stage_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.current_fan_status_ = from._impl_.current_fan_status_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.led_status_ = from._impl_.led_status_;
    }
    if (cached_has_bits & 0x00001000u) {
      if (from._internal_is_sync() != 0) {
        _this->_impl_.is_sync_ = from._impl_.is_sync_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LiveDataPoint::CopyFrom(const LiveDataPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LiveDataPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LiveDataPoint::InternalSwap(LiveDataPoint* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LiveDataPoint, _impl_.is_sync_)
      + sizeof(LiveDataPoint::_impl_.is_sync_)
      - PROTOBUF_FIELD_OFFSET(LiveDataPoint, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::google::protobuf::Metadata LiveDataPoint::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class LiveDataPointList::_Internal {
 public:
};

LiveDataPointList::LiveDataPointList(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, LiveDataPointList_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:LiveDataPointList)
}
inline PROTOBUF_NDEBUG_INLINE LiveDataPointList::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::LiveDataPointList& from_msg)
      : data_points_{visibility, arena, from.data_points_},
        _cached_size_{0} {}

LiveDataPointList::LiveDataPointList(
    ::google::protobuf::Arena* arena,
    const LiveDataPointList& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, LiveDataPointList_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  LiveDataPointList* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:LiveDataPointList)
}
inline PROTOBUF_NDEBUG_INLINE LiveDataPointList::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : data_points_{visibility, arena},
        _cached_size_{0} {}

inline void LiveDataPointList::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
LiveDataPointList::~LiveDataPointList() {
  // @@protoc_insertion_point(destructor:LiveDataPointList)
  SharedDtor(*this);
}
inline void LiveDataPointList::SharedDtor(MessageLite& self) {
  LiveDataPointList& this_ = static_cast<LiveDataPointList&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* LiveDataPointList::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) LiveDataPointList(arena);
}
constexpr auto LiveDataPointList::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(LiveDataPointList, _impl_.data_points_) +
          decltype(LiveDataPointList::_impl_.data_points_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(LiveDataPointList), alignof(LiveDataPointList), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&LiveDataPointList::PlacementNew_,
                                 sizeof(LiveDataPointList),
                                 alignof(LiveDataPointList));
  }
}
constexpr auto LiveDataPointList::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_LiveDataPointList_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &LiveDataPointList::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<LiveDataPointList>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &LiveDataPointList::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<LiveDataPointList>(), &LiveDataPointList::ByteSizeLong,
              &LiveDataPointList::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(LiveDataPointList, _impl_._cached_size_),
          false,
      },
      &LiveDataPointList::kDescriptorMethods,
      &descriptor_table_streamdata_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        LiveDataPointList_class_data_ =
            LiveDataPointList::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* LiveDataPointList::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&LiveDataPointList_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(LiveDataPointList_class_data_.tc_table);
  return LiveDataPointList_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> LiveDataPointList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    LiveDataPointList_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::LiveDataPointList>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .LiveDataPoint data_points = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(LiveDataPointList, _impl_.data_points_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .LiveDataPoint data_points = 1;
    {PROTOBUF_FIELD_OFFSET(LiveDataPointList, _impl_.data_points_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::LiveDataPoint>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void LiveDataPointList::Clear() {
// @@protoc_insertion_point(message_clear_start:LiveDataPointList)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_points_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* LiveDataPointList::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const LiveDataPointList& this_ = static_cast<const LiveDataPointList&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* LiveDataPointList::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const LiveDataPointList& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:LiveDataPointList)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .LiveDataPoint data_points = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_data_points_size());
               i < n; i++) {
            const auto& repfield = this_._internal_data_points().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:LiveDataPointList)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t LiveDataPointList::ByteSizeLong(const MessageLite& base) {
          const LiveDataPointList& this_ = static_cast<const LiveDataPointList&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t LiveDataPointList::ByteSizeLong() const {
          const LiveDataPointList& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:LiveDataPointList)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .LiveDataPoint data_points = 1;
            {
              total_size += 1UL * this_._internal_data_points_size();
              for (const auto& msg : this_._internal_data_points()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void LiveDataPointList::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LiveDataPointList*>(&to_msg);
  auto& from = static_cast<const LiveDataPointList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LiveDataPointList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_points()->MergeFrom(
      from._internal_data_points());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LiveDataPointList::CopyFrom(const LiveDataPointList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LiveDataPointList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LiveDataPointList::InternalSwap(LiveDataPointList* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_points_.InternalSwap(&other->_impl_.data_points_);
}

::google::protobuf::Metadata LiveDataPointList::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_streamdata_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
